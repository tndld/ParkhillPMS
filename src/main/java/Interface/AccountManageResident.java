/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Interface;

import User.AccountExecutive;
import User.Invoice;
import User.Payment;
import User.Receipt;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.util.Date;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public class AccountManageResident extends getActiveUser {

    /**
     * Creates new form AccountManageResident
     */
    public AccountManageResident() {
        initComponents();
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        setLocation(size.width / 2 - getWidth() / 2, size.height / 2 - getHeight() / 2);
        
        setInvoiceTable();
        setReceiptTable();
        setPaymentTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        resAccTitle = new javax.swing.JLabel();
        Tab = new javax.swing.JTabbedPane();
        allInvoicePanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        invoiceTable = new javax.swing.JTable();
        vInvoiceBTN = new javax.swing.JButton();
        invoiceBTN1 = new javax.swing.JButton();
        allReceiptPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        receiptTable = new javax.swing.JTable();
        vreceiptBTN = new javax.swing.JButton();
        oustandingPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        outstandingTable = new javax.swing.JTable();
        amountTF1 = new javax.swing.JTextField();
        descTF1 = new javax.swing.JTextField();
        issueDateTF = new javax.swing.JTextField();
        invoiceTF = new javax.swing.JTextField();
        invoice = new javax.swing.JLabel();
        unit2 = new javax.swing.JLabel();
        issueDate = new javax.swing.JLabel();
        desc1 = new javax.swing.JLabel();
        amount1 = new javax.swing.JLabel();
        unitTF2 = new javax.swing.JTextField();
        due = new javax.swing.JLabel();
        dueTF = new javax.swing.JTextField();
        vInvoiceBTN1 = new javax.swing.JButton();
        paymentPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        paymentTable = new javax.swing.JTable();
        approveBTN = new javax.swing.JButton();
        invoice2 = new javax.swing.JLabel();
        invoiceTF2 = new javax.swing.JTextField();
        resTF = new javax.swing.JTextField();
        resident = new javax.swing.JLabel();
        paymentDateTF = new javax.swing.JTextField();
        paymentDate = new javax.swing.JLabel();
        bank = new javax.swing.JLabel();
        amount = new javax.swing.JLabel();
        amountTF = new javax.swing.JTextField();
        rejectBTN = new javax.swing.JButton();
        bankTF = new javax.swing.JTextField();
        desc = new javax.swing.JLabel();
        evidenceTF = new javax.swing.JTextField();
        unitN = new javax.swing.JLabel();
        unitTF = new javax.swing.JTextField();
        statusLB = new javax.swing.JLabel();
        statusTF = new javax.swing.JTextField();
        paymentDate1 = new javax.swing.JLabel();
        pymNoTF = new javax.swing.JTextField();
        desc2 = new javax.swing.JLabel();
        descTF = new javax.swing.JTextField();
        homepageBTN = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        resAccTitle.setFont(new java.awt.Font("Goudy Old Style", 3, 36)); // NOI18N
        resAccTitle.setText("Account");

        Tab.setBackground(new java.awt.Color(204, 204, 255));
        Tab.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Tab.setForeground(new java.awt.Color(51, 51, 51));
        Tab.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N

        invoiceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Invoice No.", "Issuance Date", "Unit No.", "Receiver", "Description", "Amount", "Due Date", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(invoiceTable);

        vInvoiceBTN.setText("View Invoice");
        vInvoiceBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vInvoiceBTNActionPerformed(evt);
            }
        });

        invoiceBTN1.setText("Issue New Invoice");
        invoiceBTN1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invoiceBTN1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout allInvoicePanelLayout = new javax.swing.GroupLayout(allInvoicePanel);
        allInvoicePanel.setLayout(allInvoicePanelLayout);
        allInvoicePanelLayout.setHorizontalGroup(
            allInvoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(allInvoicePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(allInvoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 636, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, allInvoicePanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(invoiceBTN1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(vInvoiceBTN)))
                .addContainerGap())
        );
        allInvoicePanelLayout.setVerticalGroup(
            allInvoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(allInvoicePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(allInvoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vInvoiceBTN)
                    .addComponent(invoiceBTN1))
                .addContainerGap())
        );

        Tab.addTab("All Invoice", allInvoicePanel);

        receiptTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Receipt No.", "Issuance Date", "Unit No.", "Received From", "Amount", "Bank"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(receiptTable);

        vreceiptBTN.setText("View Receipt");
        vreceiptBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vreceiptBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout allReceiptPanelLayout = new javax.swing.GroupLayout(allReceiptPanel);
        allReceiptPanel.setLayout(allReceiptPanelLayout);
        allReceiptPanelLayout.setHorizontalGroup(
            allReceiptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(allReceiptPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(allReceiptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 636, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, allReceiptPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(vreceiptBTN)))
                .addContainerGap())
        );
        allReceiptPanelLayout.setVerticalGroup(
            allReceiptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(allReceiptPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(vreceiptBTN)
                .addContainerGap())
        );

        Tab.addTab("All Receipt", allReceiptPanel);

        outstandingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Invoice No.", "Date of Issuance", "Unit No.", "Receiver", "Description", "Amount", "Due Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        outstandingTable.getTableHeader().setReorderingAllowed(false);
        outstandingTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                outstandingTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(outstandingTable);

        amountTF1.setEditable(false);

        descTF1.setEditable(false);

        issueDateTF.setEditable(false);

        invoiceTF.setEditable(false);

        invoice.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        invoice.setText("Invoice No.");

        unit2.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        unit2.setText("Unit No.");

        issueDate.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        issueDate.setText("Date of Issuance");

        desc1.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        desc1.setText("Description");

        amount1.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        amount1.setText("Amount (RM)");

        unitTF2.setEditable(false);

        due.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        due.setText("Due");

        dueTF.setEditable(false);

        vInvoiceBTN1.setText("View Invoice");
        vInvoiceBTN1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vInvoiceBTN1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout oustandingPanelLayout = new javax.swing.GroupLayout(oustandingPanel);
        oustandingPanel.setLayout(oustandingPanelLayout);
        oustandingPanelLayout.setHorizontalGroup(
            oustandingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(oustandingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(oustandingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(oustandingPanelLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(oustandingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(unit2, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(issueDate)
                            .addComponent(invoice, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(desc1)
                            .addComponent(amount1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(oustandingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(oustandingPanelLayout.createSequentialGroup()
                                .addComponent(unitTF2, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(due, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(dueTF))
                            .addComponent(invoiceTF, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(descTF1, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(amountTF1, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(issueDateTF, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(vInvoiceBTN1, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                        .addGap(20, 20, 20))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        oustandingPanelLayout.setVerticalGroup(
            oustandingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(oustandingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(oustandingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(invoiceTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(invoice, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(oustandingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(unit2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(unitTF2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(due, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dueTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(oustandingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(issueDateTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(issueDate, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(oustandingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(descTF1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(desc1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(oustandingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(amountTF1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(amount1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(vInvoiceBTN1))
                .addContainerGap(75, Short.MAX_VALUE))
        );

        Tab.addTab("Outstanding Fee", oustandingPanel);

        paymentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Invoice No.", "Submission Date", "Unit No.", "Received From", "Bank", "Description", "Amount", "Evidence", "Status", "Payment No."
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        paymentTable.getTableHeader().setReorderingAllowed(false);
        paymentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                paymentTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(paymentTable);

        approveBTN.setText("Approve");
        approveBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                approveBTNActionPerformed(evt);
            }
        });

        invoice2.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        invoice2.setText("Invoice No.");

        invoiceTF2.setEditable(false);

        resTF.setEditable(false);

        resident.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        resident.setText("Received From");

        paymentDateTF.setEditable(false);

        paymentDate.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        paymentDate.setText("Payment Date");

        bank.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        bank.setText("Bank Name");

        amount.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        amount.setText("Amount (RM)");

        amountTF.setEditable(false);

        rejectBTN.setText("Reject");
        rejectBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rejectBTNActionPerformed(evt);
            }
        });

        bankTF.setEditable(false);

        desc.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        desc.setText("Evidence");

        evidenceTF.setEditable(false);

        unitN.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        unitN.setText("Unit No.");

        unitTF.setEditable(false);

        statusLB.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        statusLB.setText("Status");

        statusTF.setEditable(false);

        paymentDate1.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        paymentDate1.setText("Payment No.");

        pymNoTF.setEditable(false);

        desc2.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        desc2.setText("Description");

        descTF.setEditable(false);

        javax.swing.GroupLayout paymentPanelLayout = new javax.swing.GroupLayout(paymentPanel);
        paymentPanel.setLayout(paymentPanelLayout);
        paymentPanelLayout.setHorizontalGroup(
            paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paymentPanelLayout.createSequentialGroup()
                .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paymentPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 636, Short.MAX_VALUE))
                    .addGroup(paymentPanelLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(paymentPanelLayout.createSequentialGroup()
                                    .addGap(1, 1, 1)
                                    .addComponent(paymentDate))
                                .addComponent(invoice2, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                                .addComponent(desc)
                                .addComponent(amount, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                                .addComponent(resident, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(desc2))
                        .addGap(18, 18, 18)
                        .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(descTF)
                            .addComponent(evidenceTF, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(paymentPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(amountTF, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(statusLB, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(44, 44, 44)
                                .addComponent(statusTF, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, paymentPanelLayout.createSequentialGroup()
                                .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(paymentPanelLayout.createSequentialGroup()
                                        .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(invoiceTF2, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                                            .addComponent(resTF))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(unitN, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(bank)))
                                    .addGroup(paymentPanelLayout.createSequentialGroup()
                                        .addComponent(paymentDateTF, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(10, 10, 10)
                                        .addComponent(paymentDate1)))
                                .addGap(20, 20, 20)
                                .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(pymNoTF)
                                    .addComponent(unitTF)
                                    .addComponent(bankTF))))
                        .addGap(18, 18, 18)
                        .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(rejectBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(approveBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(4, 4, 4)))
                .addContainerGap())
        );
        paymentPanelLayout.setVerticalGroup(
            paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paymentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(paymentPanelLayout.createSequentialGroup()
                        .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(invoice2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(invoiceTF2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bank, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bankTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(resident, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(resTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(unitN, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(unitTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(paymentDate, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(paymentDateTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(paymentDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pymNoTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(4, 4, 4)
                        .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(desc, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(evidenceTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(desc2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(descTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(statusTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(statusLB, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(amountTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(amount, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(paymentPanelLayout.createSequentialGroup()
                        .addComponent(approveBTN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rejectBTN)))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        Tab.addTab("Payment Approval", paymentPanel);

        homepageBTN.setText("Back");
        homepageBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homepageBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Tab)
                        .addGap(26, 26, 26))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(homepageBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(resAccTitle)
                .addGap(286, 286, 286))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(homepageBTN)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resAccTitle)
                .addGap(18, 18, 18)
                .addComponent(Tab, javax.swing.GroupLayout.PREFERRED_SIZE, 528, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(39, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void homepageBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homepageBTNActionPerformed
        this.setVisible(false);
        new AccountExeHomepage().setVisible(true);
    }//GEN-LAST:event_homepageBTNActionPerformed

    private void approveBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_approveBTNActionPerformed
        
        if (!(invoiceTF2.getText()).equals("")){
            AccountExecutive acc = new AccountExecutive(getActiveUser()[0], getActiveUser()[1]);
            String name = acc.getname();
            String today = DateFormat.getDateInstance().format(new Date());
            
            Receipt rcp = new Receipt(invoiceTF2.getText(), today, pymNoTF.getText(), descTF.getText(), name);
            if (rcp.addReceipt()){
                JOptionPane.showMessageDialog(this, 
                        "Payment Approved.\nReceipt is issued.");
            } else {
                JOptionPane.showMessageDialog(this, 
                        "Errors occured, please try again.", "Error Message", 
                        JOptionPane.ERROR_MESSAGE);
            }
            
            this.setVisible(false);
            new AccountManageResident().setVisible(true);
            
        }else {
            JOptionPane.showMessageDialog(this, 
                    "Please select a payment item from the table to update status.", "Error Message", 
                    JOptionPane.ERROR_MESSAGE);
        }
        
        this.setVisible(false);
    }//GEN-LAST:event_approveBTNActionPerformed

    private void vInvoiceBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vInvoiceBTNActionPerformed
        int selectedRow = invoiceTable.getSelectedRow();
        if (selectedRow != -1){
            DefaultTableModel model = (DefaultTableModel)invoiceTable.getModel();
            String invNo = model.getValueAt(invoiceTable.getSelectedRow(), 0).toString();
            String receiver = model.getValueAt(invoiceTable.getSelectedRow(), 3).toString();
            String unit = model.getValueAt(invoiceTable.getSelectedRow(), 2).toString();
            String date = model.getValueAt(invoiceTable.getSelectedRow(), 1).toString();

            int count = 0;
            String filePath = "database\\invoice.txt";
            String tempFile = "database\\tempInvItem.txt";

            try {
                BufferedReader br = new BufferedReader(new FileReader(filePath));
                BufferedWriter bw = new BufferedWriter(new FileWriter(tempFile));

                bw.write(invNo + ":" + receiver + ":" + unit 
                        + ":" + date + "\n");
                String line;
                while ((line = br.readLine()) != null) {
                    String[] invInfo = line.split(":");

                    if (invInfo[0].equals(invNo)){
                        count += 1;
                        bw.write(count + ":" + invInfo[4] + ":" + invInfo[6] + ":" 
                                + invInfo[5] + "\n");
                    }
                }
                br.close();
                bw.close();

            } catch (IOException ex){
                System.out.println("Exception occur when getting invoice item: " + ex);
            }

            new InvoicePage().setVisible(true);
            
        } else {
            JOptionPane.showMessageDialog(this, 
                    "Please select an invoice item from the table to view.", "Error Message", 
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_vInvoiceBTNActionPerformed

    private void vreceiptBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vreceiptBTNActionPerformed
        int selectedRow = receiptTable.getSelectedRow();
        if (selectedRow != -1){
            DefaultTableModel model = (DefaultTableModel)receiptTable.getModel();
            String rcpNo = model.getValueAt(receiptTable.getSelectedRow(), 0).toString();
            String date = model.getValueAt(receiptTable.getSelectedRow(), 1).toString();
            String unit = model.getValueAt(receiptTable.getSelectedRow(), 4).toString();
            String name = model.getValueAt(receiptTable.getSelectedRow(), 5).toString();
            String desc = model.getValueAt(receiptTable.getSelectedRow(), 6).toString();
            String amt = model.getValueAt(receiptTable.getSelectedRow(), 7).toString();
            String issuer = model.getValueAt(receiptTable.getSelectedRow(), 8).toString();
            String pymNO = model.getValueAt(receiptTable.getSelectedRow(), 2).toString();
            
            String tempFile = "database\\tempReceiptItem.txt";
            String filePath = "database\\payment.txt";
            
            try{
                BufferedReader br = new BufferedReader(new FileReader(filePath));
                String line;
                String bankN = "";
                while ((line = br.readLine()) != null){
                    String[] info = line.split(":");
                    String pym = info[9];
                    if (pym.equals(pymNO)){
                        bankN = info[4];
                    }
                }
                BufferedWriter bw = new BufferedWriter(new FileWriter(tempFile));
                bw.write(rcpNo + ":" + date + ":" + unit + ":" + name + ":" + issuer + ":" + bankN + ":" + amt + "\n" + desc + ":" + amt);
                bw.close();
                new ReceiptPage().setVisible(true);
                
            } catch (IOException ex){
                System.out.println("Exception occur when getting invoice item: " + ex);
            }
        }
    }//GEN-LAST:event_vreceiptBTNActionPerformed

    private void invoiceBTN1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invoiceBTN1ActionPerformed
        this.setVisible(false);
        new AccIssueResInvoice().setVisible(true);
    }//GEN-LAST:event_invoiceBTN1ActionPerformed

    private void vInvoiceBTN1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vInvoiceBTN1ActionPerformed
        int selectedRow = outstandingTable.getSelectedRow();
        if (selectedRow != -1){
            DefaultTableModel model = (DefaultTableModel)outstandingTable.getModel();
            String invNo = model.getValueAt(outstandingTable.getSelectedRow(), 0).toString();
            String receiver = model.getValueAt(outstandingTable.getSelectedRow(), 3).toString();
            String unit = model.getValueAt(outstandingTable.getSelectedRow(), 2).toString();
            String date = model.getValueAt(outstandingTable.getSelectedRow(), 1).toString();

            int count = 0;
            String filePath = "database\\invoice.txt";
            String tempFile = "database\\tempInvItem.txt";

            try {
                BufferedReader br = new BufferedReader(new FileReader(filePath));
                BufferedWriter bw = new BufferedWriter(new FileWriter(tempFile));

                bw.write(invNo + ":" + receiver + ":" + unit 
                        + ":" + date + "\n");
                String line;
                while ((line = br.readLine()) != null) {
                    String[] invInfo = line.split(":");

                    if (invInfo[0].equals(invNo)){
                        count += 1;
                        bw.write(count + ":" + invInfo[4] + ":" + invInfo[6] + ":" 
                                + invInfo[5] + "\n");
                    }
                }
                br.close();
                bw.close();

            } catch (IOException ex){
                System.out.println("Exception occur when getting invoice item: " + ex);
            }

            new InvoicePage().setVisible(true);
            
        } else {
            JOptionPane.showMessageDialog(this, 
                    "Please select an invoice item from the table to view.", "Error Message", 
                    JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_vInvoiceBTN1ActionPerformed

    private void outstandingTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_outstandingTableMouseClicked
        DefaultTableModel model = (DefaultTableModel)outstandingTable.getModel();
        String invNo = model.getValueAt(outstandingTable.getSelectedRow(), 0).toString();
        String receiver = model.getValueAt(outstandingTable.getSelectedRow(), 3).toString();
        String unit = model.getValueAt(outstandingTable.getSelectedRow(), 2).toString();
        String date = model.getValueAt(outstandingTable.getSelectedRow(), 1).toString();
        String desc = model.getValueAt(outstandingTable.getSelectedRow(), 4).toString();
        String amt = model.getValueAt(outstandingTable.getSelectedRow(), 5).toString();
        String due = model.getValueAt(outstandingTable.getSelectedRow(), 6).toString();
        
        invoiceTF.setText(invNo);
        unitTF2.setText(unit);
        dueTF.setText(due);
        issueDateTF.setText(date);
        descTF1.setText(desc);
        amountTF1.setText(amt);
    }//GEN-LAST:event_outstandingTableMouseClicked

    private void paymentTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paymentTableMouseClicked
        DefaultTableModel model = (DefaultTableModel)paymentTable.getModel();
        String invNo = model.getValueAt(paymentTable.getSelectedRow(), 0).toString();
        String from = model.getValueAt(paymentTable.getSelectedRow(), 3).toString();
        String unit = model.getValueAt(paymentTable.getSelectedRow(), 2).toString();
        String date = model.getValueAt(paymentTable.getSelectedRow(), 1).toString();
        String bank = model.getValueAt(paymentTable.getSelectedRow(), 4).toString();
        String amt = model.getValueAt(paymentTable.getSelectedRow(), 6).toString();
        String evi = model.getValueAt(paymentTable.getSelectedRow(), 7).toString();
        String status = model.getValueAt(paymentTable.getSelectedRow(), 8).toString();
        String pymNo = model.getValueAt(paymentTable.getSelectedRow(), 9).toString();
        String descri = model.getValueAt(paymentTable.getSelectedRow(), 5).toString();
        
        invoiceTF2.setText(invNo);
        resTF.setText(from);
        unitTF.setText(unit);
        evidenceTF.setText(evi);
        paymentDateTF.setText(date);
        statusTF.setText(status);
        amountTF.setText(amt);
        bankTF.setText(bank);
        pymNoTF.setText(pymNo);
        descTF.setText(descri);
    }//GEN-LAST:event_paymentTableMouseClicked

    private void rejectBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rejectBTNActionPerformed
        
        if (!(invoiceTF2.getText()).equals("")){
            Payment pym = new Payment(invoiceTF2.getText(), pymNoTF.getText(), descTF.getText());
            if (pym.updatePaymentStatus("Fail")){
                Invoice inv = new Invoice(invoiceTF2.getText(), descTF.getText());
                if (inv.updateInvoiceStatus("Unpaid")){
                    JOptionPane.showMessageDialog(this, 
                            "Payment was rejected. \n Please proceed to refund to user.");
                        this.setVisible(false);
                        new AccountManageResident().setVisible(true);
                } else {
                    JOptionPane.showMessageDialog(this, 
                            "Errors occured, please try again.", "Error Message", 
                            JOptionPane.ERROR_MESSAGE);
                }
            } else {
                        JOptionPane.showMessageDialog(this, 
                            "Errors occured, please try again.", "Error Message", 
                            JOptionPane.ERROR_MESSAGE);
            }
        }else {
            JOptionPane.showMessageDialog(this, 
                    "Please select a payment item from the table to update status.", "Error Message", 
                    JOptionPane.ERROR_MESSAGE);
        }
        
        
    }//GEN-LAST:event_rejectBTNActionPerformed

    private void setInvoiceTable(){
        try{
            String filePath = "database\\invoice.txt";
            BufferedReader br2 = new BufferedReader(new FileReader(filePath));
            String firstLine = br2.readLine().trim();
            String[] columns = firstLine.split(":");
            DefaultTableModel invoiceTB = (DefaultTableModel)invoiceTable.getModel();
            invoiceTB.setColumnIdentifiers(columns);
            Object[] record = br2.lines().toArray();
            for (int i = 0; i < record.length; i++){
                String line = record[i].toString().trim();
                String[] recInfo = line.split(":");
                invoiceTB.addRow(recInfo);
            }                
            br2.close();

            String tempFile = "database\\tempOustandingInv.txt";
            BufferedReader br4 = new BufferedReader(new FileReader(filePath));
            BufferedWriter bw = new BufferedWriter(new FileWriter(tempFile));
            br4.readLine();
            String line;
            while ((line = br4.readLine()) != null) {
                String[] invInfo = line.split(":");
                if (invInfo[7].equals("Unpaid")) {
                    bw.write(invInfo[0] + ":" + invInfo[1] + ":" + 
                            invInfo[2] + ":" + invInfo[3] + ":" + 
                            invInfo[4] + ":" + invInfo[5] + ":" + 
                            invInfo[6] + "\n");
                }
            }
            bw.close();
            br4.close();

            BufferedReader br3 = new BufferedReader(new FileReader(tempFile));
            DefaultTableModel outstanding = (DefaultTableModel)outstandingTable.getModel();
            Object[] record2 = br3.lines().toArray();
            for (int i = 0; i < record2.length; i++) {
                String line2 = record2[i].toString().trim();
                String[] outInfo = line2.split(":");
                outstanding.addRow(outInfo);
            }
            br3.close();
            new File(tempFile).delete();
            
        } catch (IOException ex) {
            System.out.println("Exception occur: " + ex);
        }
    }
    
    private void setReceiptTable(){
        try {
            String filePath = "database\\receipt.txt";
            BufferedReader br = new BufferedReader(new FileReader(filePath));
            String firstLine = br.readLine().trim();
            String[] columns = firstLine.split(":");
            DefaultTableModel rcpTB = (DefaultTableModel)receiptTable.getModel();
            rcpTB.setColumnIdentifiers(columns);
            Object[] record = br.lines().toArray();
            for (int i = 0; i < record.length; i++){
                String line = record[i].toString().trim();
                String[] recInfo = line.split(":");
                rcpTB.addRow(recInfo);
            }                
            br.close();
            
        } catch (IOException ex) {
            System.out.println("Exception occur: " + ex);
        }
    }
    
    
    private void setPaymentTable() {
        try {
            String filePath = "database\\payment.txt";
            BufferedReader br = new BufferedReader(new FileReader(filePath));
            String firstLine = br.readLine().trim();
            String[] columns = firstLine.split(":");
            DefaultTableModel paymentTB = (DefaultTableModel)paymentTable.getModel();
            paymentTB.setColumnIdentifiers(columns);
            Object[] record = br.lines().toArray();
            for (int i = 0; i < record.length; i++){
                String line = record[i].toString().trim();
                String[] recInfo = line.split(":");
                if (recInfo[8].equals("Pending")) paymentTB.addRow(recInfo);
            }                
            br.close();
            
        } catch (IOException ex) {
            System.out.println("Exception occur: " + ex);
        }
    }
    
    @Override
    public String[] getActiveUser(){
        String filePath = "database\\activeUser.txt";
        try{
            BufferedReader br = new BufferedReader(new FileReader(filePath));
            String line = br.readLine();
            String[] activeUser = line.split(",");           
            br.close();
            return activeUser;
        }catch(IOException e){
            System.out.println("Input Output Exception Occurred" + e);
            return null;
        }catch(Exception e) {
            System.out.println("Exception " + e);
            return null;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AccountManageResident.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AccountManageResident.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AccountManageResident.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AccountManageResident.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AccountManageResident().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane Tab;
    private javax.swing.JPanel allInvoicePanel;
    private javax.swing.JPanel allReceiptPanel;
    private javax.swing.JLabel amount;
    private javax.swing.JLabel amount1;
    private javax.swing.JTextField amountTF;
    private javax.swing.JTextField amountTF1;
    private javax.swing.JButton approveBTN;
    private javax.swing.JLabel bank;
    private javax.swing.JTextField bankTF;
    private javax.swing.JLabel desc;
    private javax.swing.JLabel desc1;
    private javax.swing.JLabel desc2;
    private javax.swing.JTextField descTF;
    private javax.swing.JTextField descTF1;
    private javax.swing.JLabel due;
    private javax.swing.JTextField dueTF;
    private javax.swing.JTextField evidenceTF;
    private javax.swing.JButton homepageBTN;
    private javax.swing.JLabel invoice;
    private javax.swing.JLabel invoice2;
    private javax.swing.JButton invoiceBTN1;
    private javax.swing.JTextField invoiceTF;
    private javax.swing.JTextField invoiceTF2;
    private javax.swing.JTable invoiceTable;
    private javax.swing.JLabel issueDate;
    private javax.swing.JTextField issueDateTF;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPanel oustandingPanel;
    private javax.swing.JTable outstandingTable;
    private javax.swing.JLabel paymentDate;
    private javax.swing.JLabel paymentDate1;
    private javax.swing.JTextField paymentDateTF;
    private javax.swing.JPanel paymentPanel;
    private javax.swing.JTable paymentTable;
    private javax.swing.JTextField pymNoTF;
    private javax.swing.JTable receiptTable;
    private javax.swing.JButton rejectBTN;
    private javax.swing.JLabel resAccTitle;
    private javax.swing.JTextField resTF;
    private javax.swing.JLabel resident;
    private javax.swing.JLabel statusLB;
    private javax.swing.JTextField statusTF;
    private javax.swing.JLabel unit2;
    private javax.swing.JLabel unitN;
    private javax.swing.JTextField unitTF;
    private javax.swing.JTextField unitTF2;
    private javax.swing.JButton vInvoiceBTN;
    private javax.swing.JButton vInvoiceBTN1;
    private javax.swing.JButton vreceiptBTN;
    // End of variables declaration//GEN-END:variables
}
